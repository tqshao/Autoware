<<<<<<< HEAD
FROM nvidia/opengl:1.0-glvnd-devel-ubuntu16.04
MAINTAINER Yuki Iida <yuki.iida@tier4.jp>

ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install --assume-yes apt-utils

# Develop
#ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update && apt-get install -y \
	dialog \
	apt-utils \
        software-properties-common \
        wget curl git cmake cmake-curses-gui \
=======
# Note this is the car_demo docker file extracted
# https://github.com/CPFL/Autoware/blob/master/docker/generic/Dockerfile.kinetic
FROM nvidia/cuda:8.0-devel-ubuntu16.04

# to get ride of warning: https://github.com/phusion/baseimage-docker/issues/58
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

################################################################################ START
# https://github.com/osrf/docker_images/blob/5399f380af0a7735405a4b6a07c6c40b867563bd/ros/kinetic/ubuntu/xenial/ros-core/Dockerfile
################################################################################
# This is an auto generated Dockerfile for ros:ros-core
# generated from docker_images/create_ros_core_image.Dockerfile.em
# FROM ubuntu:xenial
# install packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu xenial main" > /etc/apt/sources.list.d/ros-latest.list

# install bootstrap tools
RUN apt-get update && apt-get install --no-install-recommends -y \
    python-rosdep \
    python-rosinstall \
    python-vcstools \
    && rm -rf /var/lib/apt/lists/*

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

# bootstrap rosdep
RUN rosdep init \
    && rosdep update

# install ros packages
ENV ROS_DISTRO kinetic
RUN apt-get update && apt-get install -y \
    ros-kinetic-ros-core=1.3.1-0* \
    && rm -rf /var/lib/apt/lists/*

# setup entrypoint
COPY ./ros_entrypoint.sh /

#ENTRYPOINT ["/ros_entrypoint.sh"]  # H.F. comment out
#CMD ["bash"]                       # H.F. comment out
################################################################################  END
# https://github.com/osrf/docker_images/blob/5399f380af0a7735405a4b6a07c6c40b867563bd/ros/kinetic/ubuntu/xenial/ros-core/Dockerfile
##############################################################
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%
################################################################################ START
# https://github.com/osrf/docker_images/blob/5399f380af0a7735405a4b6a07c6c40b867563bd/ros/kinetic/ubuntu/xenial/ros-base/Dockerfile
##############################################################
# This is an auto generated Dockerfile for ros:ros-base
# generated from docker_images/create_ros_image.Dockerfile.em
# FROM ros:kinetic-ros-core-xenial  # H.F. comment out

# install ros packages
RUN apt-get update && apt-get install -y \
    ros-kinetic-ros-base=1.3.1-0* \
&& rm -rf /var/lib/apt/lists/*
############################################################  END
# https://github.com/osrf/docker_images/blob/5399f380af0a7735405a4b6a07c6c40b867563bd/ros/kinetic/ubuntu/xenial/ros-base/Dockerfile
##############################################################
#%%%%%%%%
############################################################  START
# https://github.com/osrf/docker_images/blob/5399f380af0a7735405a4b6a07c6c40b867563bd/ros/kinetic/ubuntu/xenial/robot/Dockerfile
##############################################################
# This is an auto generated Dockerfile for ros:robot
# generated from docker_images/create_ros_image.Dockerfile.em
# FROM ros:kinetic-ros-base-xenial  # H.F. comment out

# install ros packages
RUN apt-get update && apt-get install -y \
    ros-kinetic-robot=1.3.1-0* \
&& rm -rf /var/lib/apt/lists/*
############################################################  END
# https://github.com/osrf/docker_images/blob/5399f380af0a7735405a4b6a07c6c40b867563bd/ros/kinetic/ubuntu/xenial/robot/Dockerfile
##############################################################
#%%%%%%%%
############################################################ START
#https://github.com/osrf/docker_images/blob/master/ros/kinetic/ubuntu/xenial/desktop/Dockerfile
##############################################################
# This is an auto generated Dockerfile for ros:desktop
# generated from docker_images/create_ros_image.Dockerfile.em
# FROM ros:kinetic-robot-xenial   # H.F. comment out

# install ros packages
RUN apt-get update && apt-get install -y \
    ros-kinetic-desktop=1.3.1-0* \
&& rm -rf /var/lib/apt/lists/*
############################################################  END
# https://github.com/osrf/docker_images/blob/master/ros/kinetic/ubuntu/xenial/desktop/Dockerfile
##############################################################
#%%%%%%%%
############################################################ START
#https://github.com/osrf/car_demo/blob/master/Dockerfile
##############################################################
# FROM osrf/ros:kinetic-desktop     # H.F. comment out

#LABEL com.nvidia.volumes.needed="nvidia_driver"  # H.F. comment out
#ENV PATH /usr/local/nvidia/bin:${PATH}  # H.F. comment out
#ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}  # H.F. comment out

RUN apt-get update \
 && apt-get install -y \
    wget \
    lsb-release \
    sudo \
    mesa-utils \
 && apt-get clean


# Get gazebo binaries
RUN echo "deb http://packages.osrfoundation.org/gazebo/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-stable.list \
 && wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add - \
 && apt-get update \
 && apt-get install -y \
    gazebo8 \
    ros-kinetic-gazebo8-ros-pkgs \
    ros-kinetic-fake-localization \
    ros-kinetic-joy \
 && apt-get clean


#RUN mkdir -p /tmp/workspace/src                                         # H.F. comment out
#COPY car_demo/prius_description /tmp/workspace/src/prius_description    # H.F. comment out
#COPY car_demo/prius_msgs /tmp/workspace/src/prius_msgs                   # H.F. comment out
#COPY car_demo/car_demo /tmp/workspace/src/car_demo                        # H.F. comment out


# RUN /bin/bash -c 'cd /tmp/workspace \       # H.F. comment out
# && source /opt/ros/kinetic/setup.bash \     # H.F. comment out
# && catkin_make'                             # H.F. comment out

# CMD ["/bin/bash", "-c", "source /opt/ros/kinetic/setup.bash && source /tmp/workspace/devel/setup.bash && roslaunch car_demo demo.launch"] # H.F. comment out
############################################################  END
#https://github.com/osrf/car_demo/blob/master/Dockerfile
##############################################################
#%%%%%%%%%%

# H.F.: Install some missing dependencies
RUN sudo apt-get update && sudo apt-get install -y openni2-doc openni2-utils openni-doc openni-utils
RUN sudo apt-get install -y libopenni0 libopenni-sensor-pointclouds0 libopenni2-0 libopenni-sensor-pointclouds-dev
RUN sudo apt-get install -y libopenni2-dev libopenni-dev rand

# libopencv-3.2.0-dev  https://github.com/BVLC/caffe/wiki/OpenCV-3.2-Installation-Guide-on-Ubuntu-16.04

############################################################  START
# https://github.com/CPFL/Autoware/blob/master/docker/generic/Dockerfile.kinetic
##############################################################
# FROM nvidia/cuda:8.0-devel-ubuntu16.04 # H.F. comment out
MAINTAINER Yuki Iida <yuki.iida@tier4.jp>

# H.F. comment out, removed:
# wget
# Develop
RUN apt-get update && apt-get install -y \
        software-properties-common \
        curl git cmake cmake-curses-gui \
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6
        libboost-all-dev \
        libflann-dev \
        libgsl0-dev \
        libgoogle-perftools-dev \
<<<<<<< HEAD
        libeigen3-dev \
	python-pip

# PIP install packages to avoid warnings such as "io features related to pcap will be disabled"
#RUN apt-get update && apt-get install -y dialog apt-utils
#RUN pip install --upgrade pip && pip install -U setuptools && pip install pypcap pypng

# Intall some basic GUI and sound libs
=======
        libeigen3-dev

# Install some basic GUI and sound libs
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6
RUN apt-get install -y \
        xz-utils file locales dbus-x11 pulseaudio dmz-cursor-theme \
        fonts-dejavu fonts-liberation hicolor-icon-theme \
        libcanberra-gtk3-0 libcanberra-gtk-module libcanberra-gtk3-module \
        libasound2 libgtk2.0-0 libdbus-glib-1-2 libxt6 libexif12 \
        libgl1-mesa-glx libgl1-mesa-dri language-pack-en \
        && update-locale LANG=en_US.UTF-8 LC_MESSAGES=POSIX

<<<<<<< HEAD
# Intall some basic GUI tools
=======
# Install some basic GUI tools
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6
RUN apt-get install -y \
        cmake-qt-gui \
        gnome-terminal

<<<<<<< HEAD
# Intall ROS and remove Gazebo7 and related dependencies

RUN echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list \
&& apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key \ 421C365BD9FF1F717815A3895523BAEEB01FA116 \
&& echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-stable.list \
&& wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add - \
&& apt-get update \
&& apt-get install -y ros-kinetic-desktop-full

RUN apt-get remove -y '*gazebo*'
#&& apt-get remove ros-kinetic-gazebo* \
#&& apt-get purge ros-kinetic-gazebo* \
#&& apt autoremove

RUN apt-get update \
&& apt-get install -y python-rosinstall python-rosinstall-generator python-wstool \
&& apt-get install -y gazebo8 \
&& apt-get install -y ros-kinetic-gazebo8-ros-pkgs \
&& apt-get install -y ros-kinetic-fake-localization \
&& apt-get install -y ros-kinetic-joy \
&& apt-get install -y ros-kinetic-robot-state-publisher \
&& apt-get install -y ros-kinetic-rviz \
&& apt-get clean

RUN apt-get update && apt-get install -y \
        ros-kinetic-nmea-msgs ros-kinetic-roslint\
=======
# Install ROS packages
# H.F. :
# removed: ros-kinetic-desktop-full
# changed: ros-kinetic-gazebo -> ros-kinetic-gazebo8
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
RUN apt-get update && apt-get install -y \
        ros-kinetic-nmea-msgs \
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6
        ros-kinetic-nmea-navsat-driver ros-kinetic-sound-play \
        ros-kinetic-jsk-visualization ros-kinetic-grid-map \
        ros-kinetic-gps-common ros-kinetic-controller-manager \
        ros-kinetic-ros-control ros-kinetic-ros-controllers \
        ros-kinetic-gazebo8-ros-control ros-kinetic-joystick-drivers \
        libnlopt-dev freeglut3-dev qtbase5-dev libqt5opengl5-dev libssh2-1-dev \
        libarmadillo-dev libpcap-dev gksu libgl1-mesa-dev libglew-dev python-wxgtk3.0

<<<<<<< HEAD
# Install some missing dependencies
RUN sudo apt-get update && sudo apt-get install -y openni2-doc openni2-utils openni-doc openni-utils
RUN sudo apt-get install -y libopenni0 libopenni-sensor-pointclouds0 libopenni2-0 libopenni-sensor-pointclouds-dev
RUN sudo apt-get install -y libopenni2-dev libopenni-dev libopencv-dev libmosquitto-dev ros-kinetic-cmake-modules python-vtk6

RUN pip install --upgrade pip && pip install -U setuptools && pip install pypcap pypng

# Add basic user
=======
# Add basic user
# Replace 1000 with your user/group id
# H.F. moved comments to remove [WARNING]: Empty continuation line found in: ...
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6
ENV USERNAME autoware
ENV PULSE_SERVER /run/pulse/native
RUN useradd -m $USERNAME && \
        echo "$USERNAME:$USERNAME" | chpasswd && \
        usermod --shell /bin/bash $USERNAME && \
        usermod -aG sudo $USERNAME && \
        echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$USERNAME && \
        chmod 0440 /etc/sudoers.d/$USERNAME && \
<<<<<<< HEAD
        # Replace 1000 with your user/group id
=======
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6
        usermod  --uid 1000 $USERNAME && \
        groupmod --gid 1000 $USERNAME

# Setup .bashrc for ROS
<<<<<<< HEAD
RUN echo "source /opt/ros/kinetic/setup.bash" >> /home/$USERNAME/.bashrc && \
        #Fix for qt and X server errors
        echo "export QT_X11_NO_MITSHM=1" >> /home/$USERNAME/.bashrc && \
        # cd to home on login
        echo "cd" >> /home/$USERNAME/.bashrc

# Change user
USER autoware

RUN sudo update-alternatives --install /usr/bin/vtk vtk /usr/bin/vtk6 10
RUN sudo ln -s /usr/lib/python2.7/dist-packages/vtk/libvtkRenderingPythonTkWidgets.x86_64-linux-gnu.so /usr/lib/x86_64-linux-gnu/libvtkRenderingPythonTkWidgets.so
RUN sudo rm /usr/lib/x86_64-linux-gnu/libGL.so
RUN sudo ln -s /usr/local/lib/x86_64-linux-gnu/libGL.so.1.0.0 /usr/lib/x86_64-linux-gnu/libGL.so


RUN sudo rosdep init \
=======
#Fix for qt and X server errors
# cd to home on login
RUN echo "source /opt/ros/kinetic/setup.bash" >> /home/$USERNAME/.bashrc && \
        echo "export QT_X11_NO_MITSHM=1" >> /home/$USERNAME/.bashrc && \
        echo "cd" >> /home/$USERNAME/.bashrc

RUN echo rand -N 1 # H.F. make sure we do not use the cache file
# Change user
USER autoware

# H.F. :
# added: sudo rm -rf /etc/ros/rosdep/sources.list.d/*
RUN sudo rm -rf /etc/ros/rosdep/sources.list.d/* \
        && sudo rosdep init \
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6
        && rosdep update \
        && echo "source /opt/ros/kinetic/setup.bash" >> ~/.bashrc

# Install Autoware
<<<<<<< HEAD
RUN git clone https://github.com/CPFL/Autoware.git /home/$USERNAME/Autoware
RUN /bin/bash -c 'source /opt/ros/kinetic/setup.bash; cd /home/$USERNAME/Autoware/ros/src; catkin_init_workspace; cd ../; ./catkin_make_release'
RUN echo "source /home/$USERNAME/Autoware/ros/devel/setup.bash" >> /home/$USERNAME/.bashrc

=======
RUN rand -N 1 # in case source was modified make sure it gets the latest code.  H.F.
RUN git clone https://github.com/tqshao/Autoware.git -b feature/port_car_demo /home/$USERNAME/Autoware

RUN /bin/bash -c 'source /opt/ros/kinetic/setup.bash \
&& cd /home/$USERNAME/Autoware/ros/src \
&& catkin_init_workspace; cd ../ \
&& catkin_make --pkg prius_msgs \
&& catkin_make'

# catkin_make --pkg prius_msgs && catkin_make  added H.F.
# ./catkin_make_release commented out H.F.

RUN echo "source /home/$USERNAME/Autoware/ros/devel/setup.bash" >> /home/$USERNAME/.bashrc
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6
# Setting
ENV LANG="en_US.UTF-8"
RUN echo "export LANG=\"en_US.UTF-8\"" >> /home/$USERNAME/.bashrc

# Install dev tools
<<<<<<< HEAD
RUN sudo apt-get -y install vim tmux gedit unzip
=======
RUN sudo apt-get -y install vim tmux
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6

# Change Terminal Color
RUN gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_background" --type bool false
RUN gconftool-2 --set "/apps/gnome-terminal/profiles/Default/use_theme_colors" --type bool false
RUN gconftool-2 --set "/apps/gnome-terminal/profiles/Default/background_color" --type string "#000000"

<<<<<<< HEAD
# copy irrlicht engine to the docker and build it
#RUN sudo mkdir -p /home/autoware/irrlicht-1.8.4
#COPY irrlicht-1.8.4 /home/autoware/irrlicht-1.8.4/
RUN sudo wget http://downloads.sourceforge.net/irrlicht/irrlicht-1.8.4.zip && \
sudo unzip irrlicht-1.8.4.zip -d /home/autoware && \
cd /home/autoware/irrlicht-1.8.4/source/Irrlicht && \
    sudo make sharedlib && sudo make install

# copy chrono to the docker and build it
RUN cd /opt ; sudo mkdir -p chrono/chrono_source chrono/chrono_build ; cd chrono/chrono_source && \
    sudo git clone -b master https://github.com/projectchrono/chrono.git
COPY chrono_build /opt/chrono/chrono_build
RUN cd /opt/chrono/chrono_build ; sudo make

# install Julia
RUN sudo wget https://julialang-s3.julialang.org/bin/linux/x64/0.6/julia-0.6.2-linux-x86_64.tar.gz && \
sudo tar -xvf julia-0.6.2-linux-x86_64.tar.gz -C /opt && \
echo 'alias julia='/opt/julia-d386e40c17/bin/julia'' >> ~/.bashrc


# Default CMD
CMD ["/bin/bash"]
=======
#ENTRYPOINT ["/bin/bash", "-c", "source /opt/ros/kinetic/setup.bash && source /home/$USERNAME/Autoware/ros/devel/setup.bash && cd ~/Autoware/ros && ./run"]
#ENTRYPOINT ["/bin/bash", "-c", "source /opt/ros/kinetic/setup.bash && source /home/$USERNAME/Autoware/ros/devel/setup.bash"]

# Default CMD
CMD ["/bin/bash"]

############################################################  END
# https://github.com/CPFL/Autoware/blob/master/docker/generic/Dockerfile.kinetic
##############################################################
>>>>>>> 5629c4a3df90b6a28326086050a81bd8a79fe1d6
